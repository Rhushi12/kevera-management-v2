/**
 * Kevera Manufacturing - Enhanced Shared Layout JavaScript
 * Handles navigation, mobile menu, theme switching, and user interactions
 */

class SharedLayoutManager {
  constructor() {
    this.mobileMenuOpen = false;
    this.userMenuOpen = false;
    this.searchSuggestionsOpen = false;
    this.currentTheme = localStorage.getItem('theme') || 'light';
    
    // Navigation items data structure
    this.navItems = [
      // Manufacturing Process Section
      { label: 'Dashboard', route: '#/dashboard', icon: 'dashboard', section: 'process' },
      { label: 'Intake (Step 1)', route: '#/intake', icon: 'inbox', section: 'process', badge: 'Step 1' },
      { label: 'Cutting & Bundling (Step 2)', route: '#/cutting', icon: 'cut', section: 'process', badge: 'Step 2' },
      { label: 'Sewing (Step 3)', route: '#/sewing', icon: 'styler', section: 'process', badge: 'Step 3' },
      { label: 'Ironing (Step 4)', route: '#/ironing', icon: 'iron', section: 'process', badge: 'Step 4' },
      { label: 'Labeling & Packaging (Step 5)', route: '#/packaging', icon: 'package_2', section: 'process', badge: 'Step 5' },
      
      // Management Section
      { label: 'Lots & Tracking', route: '#/lots', icon: 'list_alt', section: 'management' },
      { label: 'Workers', route: '#/workers', icon: 'group', section: 'management' },
      { label: 'Admin', route: '#/admin', icon: 'admin_panel_settings', section: 'management' },
      
      // Footer Section
      { label: 'Audit Log', route: '#/audit', icon: 'description', section: 'footer' },
      { label: 'Settings', route: '#/settings', icon: 'settings', section: 'footer' }
    ];
    
    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => this.init());
    } else {
      this.init();
    }
  }

  init() {
    this.renderNavigation();
    this.initializeTheme();
    this.setupMobileMenu();
    this.setupUserMenu();
    this.setupSearch();
    this.setupNotifications();
    this.setupKeyboardShortcuts();
    this.updateNavigationState();
    
    // Listen for route changes to update navigation
    window.addEventListener('hashchange', () => {
      this.updateNavigationState();
      this.closeMobileMenu();
    });
    
    // Setup navigation link click handlers
    this.setupNavigationClicks();
  }

  // ============================
  // NAVIGATION RENDERING
  // ============================
  
  renderNavigation() {
    const navigationContainer = document.getElementById('main-navigation');
    if (!navigationContainer) return;
    
    // Only replace if the navigation container is empty or has the placeholder comment
    if (navigationContainer.innerHTML.trim() === '<!-- Navigation will be dynamically generated by JavaScript -->' || 
        navigationContainer.children.length === 0) {
      
      // Group nav items by section
      const processItems = this.navItems.filter(item => item.section === 'process');
      const managementItems = this.navItems.filter(item => item.section === 'management');
      const footerItems = this.navItems.filter(item => item.section === 'footer');
      
      navigationContainer.innerHTML = `
        <div class="px-4 space-y-6">
          <!-- Manufacturing Process Section -->
          <div>
            <p class="text-xs font-semibold text-gray-400 dark:text-gray-500 uppercase tracking-wider mb-3 px-3">Manufacturing Process</p>
            <ul class="flex flex-col gap-y-1">
              ${processItems.map(item => this.renderNavItem(item)).join('')}
            </ul>
          </div>
          
          <!-- Management Section -->
          <div>
            <p class="text-xs font-semibold text-gray-400 dark:text-gray-500 uppercase tracking-wider mb-3 px-3">Management</p>
            <ul class="flex flex-col gap-y-1">
              ${managementItems.map(item => this.renderNavItem(item)).join('')}
            </ul>
          </div>
        </div>
        
        <!-- Footer Navigation -->
        <div class="p-4 border-t border-gray-200 dark:border-gray-700 flex-shrink-0 mt-auto">
          <ul class="flex flex-col gap-y-1">
            ${footerItems.map(item => this.renderNavItem(item)).join('')}
          </ul>
        </div>
      `;
    }
  }
  
  renderNavItem(item) {
    const routeKey = item.route.replace('#/', '');
    const badge = item.badge ? `<span class="text-xs bg-primary/10 text-primary px-2 py-1 rounded-full ml-2">${item.badge}</span>` : '';
    
    return `
      <li>
        <a href="${item.route}" 
           class="nav-link block px-3 py-2 rounded-md text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 hover:text-gray-900 dark:hover:text-white transition-all duration-200 border-l-2 border-transparent hover:border-gray-300 dark:hover:border-gray-600" 
           data-route="${routeKey}"
           role="menuitem">
          <div class="flex items-center">
            <span class="material-symbols-outlined mr-3 text-lg">${item.icon}</span>
            <span class="font-medium flex-1">${item.label}</span>
            ${badge}
          </div>
        </a>
      </li>
    `;
  }

  // ============================
  // THEME MANAGEMENT
  // ============================
  
  initializeTheme() {
    const themeToggle = document.getElementById('theme-toggle');
    const html = document.documentElement;
    
    // Apply saved theme
    if (this.currentTheme === 'dark') {
      html.classList.add('dark');
      if (themeToggle) {
        themeToggle.querySelector('.material-symbols-outlined').textContent = 'light_mode';
      }
    }
    
    // Setup theme toggle
    if (themeToggle) {
      themeToggle.addEventListener('click', () => this.toggleTheme());
    }
  }
  
  toggleTheme() {
    const html = document.documentElement;
    const themeToggle = document.getElementById('theme-toggle');
    const icon = themeToggle?.querySelector('.material-symbols-outlined');
    
    if (this.currentTheme === 'light') {
      this.currentTheme = 'dark';
      html.classList.add('dark');
      if (icon) icon.textContent = 'light_mode';
    } else {
      this.currentTheme = 'light';
      html.classList.remove('dark');
      if (icon) icon.textContent = 'dark_mode';
    }
    
    localStorage.setItem('theme', this.currentTheme);
    
    // Add subtle animation feedback
    if (themeToggle) {
      themeToggle.style.transform = 'scale(0.95)';
      setTimeout(() => {
        themeToggle.style.transform = 'scale(1)';
      }, 150);
    }
  }

  // ============================
  // MOBILE MENU MANAGEMENT
  // ============================
  
  setupMobileMenu() {
    const headerMobileMenuBtn = document.getElementById('header-mobile-menu-btn');
    const mobileCloseBtn = document.getElementById('mobile-close-btn');
    const mobileOverlay = document.getElementById('mobile-overlay');
    const sidebar = document.querySelector('aside');
    
    // Header mobile menu button
    if (headerMobileMenuBtn) {
      headerMobileMenuBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        this.toggleMobileMenu();
      });
    }
    
    // Close button in sidebar
    if (mobileCloseBtn) {
      mobileCloseBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        this.closeMobileMenu();
      });
    }
    
    // Overlay click to close
    if (mobileOverlay) {
      mobileOverlay.addEventListener('click', () => {
        this.closeMobileMenu();
      });
    }
    
    // Close on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && this.mobileMenuOpen) {
        this.closeMobileMenu();
      }
    });
    
    // Handle window resize
    window.addEventListener('resize', () => {
      if (window.innerWidth >= 1024 && this.mobileMenuOpen) {
        this.closeMobileMenu();
      }
    });
  }
  
  toggleMobileMenu() {
    if (this.mobileMenuOpen) {
      this.closeMobileMenu();
    } else {
      this.openMobileMenu();
    }
  }
  
  openMobileMenu() {
    const sidebar = document.querySelector('aside');
    const mobileOverlay = document.getElementById('mobile-overlay');
    
    if (sidebar) {
      sidebar.classList.add('mobile-open');
    }
    
    if (mobileOverlay) {
      mobileOverlay.classList.add('active');
    }
    
    this.mobileMenuOpen = true;
    document.body.style.overflow = 'hidden';
    
    // Focus trap - focus the first navigation link
    setTimeout(() => {
      const firstNavLink = sidebar?.querySelector('.nav-link');
      if (firstNavLink) {
        firstNavLink.focus();
      }
    }, 300);
  }
  
  closeMobileMenu() {
    const sidebar = document.querySelector('aside');
    const mobileOverlay = document.getElementById('mobile-overlay');
    
    if (sidebar) {
      sidebar.classList.remove('mobile-open');
    }
    
    if (mobileOverlay) {
      mobileOverlay.classList.remove('active');
    }
    
    this.mobileMenuOpen = false;
    document.body.style.overflow = '';
  }

  // ============================
  // USER MENU MANAGEMENT
  // ============================
  
  setupUserMenu() {
    const userMenuBtn = document.getElementById('user-menu-btn');
    const userMenu = document.getElementById('user-menu');
    
    if (userMenuBtn && userMenu) {
      userMenuBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        this.toggleUserMenu();
      });
      
      // Close when clicking outside
      document.addEventListener('click', (e) => {
        if (!userMenu.contains(e.target) && !userMenuBtn.contains(e.target)) {
          this.closeUserMenu();
        }
      });
    }
  }
  
  toggleUserMenu() {
    const userMenu = document.getElementById('user-menu');
    
    if (this.userMenuOpen) {
      this.closeUserMenu();
    } else {
      if (userMenu) {
        userMenu.classList.remove('hidden');
        userMenu.classList.add('kevera-fade-in');
        this.userMenuOpen = true;
      }
    }
  }
  
  closeUserMenu() {
    const userMenu = document.getElementById('user-menu');
    
    if (userMenu && this.userMenuOpen) {
      userMenu.classList.add('hidden');
      userMenu.classList.remove('kevera-fade-in');
      this.userMenuOpen = false;
    }
  }

  // ============================
  // SEARCH FUNCTIONALITY
  // ============================
  
  setupSearch() {
    const searchInput = document.getElementById('global-search');
    const searchSuggestions = document.getElementById('search-suggestions');
    
    if (searchInput && searchSuggestions) {
      searchInput.addEventListener('focus', () => {
        searchSuggestions.classList.remove('hidden');
        this.searchSuggestionsOpen = true;
      });
      
      searchInput.addEventListener('blur', (e) => {
        // Delay to allow clicking on suggestions
        setTimeout(() => {
          searchSuggestions.classList.add('hidden');
          this.searchSuggestionsOpen = false;
        }, 200);
      });
      
      searchInput.addEventListener('input', (e) => {
        this.handleSearch(e.target.value);
      });
      
      // Handle search shortcuts
      searchInput.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          searchInput.blur();
          searchSuggestions.classList.add('hidden');
          this.searchSuggestionsOpen = false;
        }
      });
    }
  }
  
  handleSearch(query) {
    // Implement search functionality here
    console.log('Searching for:', query);
    // This would typically make an API call to search lots, workers, etc.
  }

  // ============================
  // NOTIFICATIONS
  // ============================
  
  setupNotifications() {
    // Update notification badge
    this.updateNotificationBadge(3); // Example: 3 unread notifications
  }
  
  updateNotificationBadge(count) {
    const badge = document.getElementById('notification-badge');
    if (badge) {
      if (count > 0) {
        badge.textContent = count > 9 ? '9+' : count.toString();
        badge.classList.remove('hidden');
      } else {
        badge.classList.add('hidden');
      }
    }
  }

  // ============================
  // NAVIGATION STATE MANAGEMENT
  // ============================
  
  updateNavigationState() {
    const currentHash = window.location.hash || '#/dashboard';
    const routeKey = currentHash.replace('#/', '') || 'dashboard';
    
    // Remove active state from all nav items
    const navLinks = document.querySelectorAll('.nav-link');
    navLinks.forEach(link => {
      link.classList.remove('is-active');
      link.removeAttribute('aria-current');
      link.classList.remove('border-primary');
      link.classList.add('border-transparent', 'hover:border-gray-300', 'dark:hover:border-gray-600');
    });
    
    // Add active state to current nav item
    const activeLink = document.querySelector(`[data-route="${routeKey}"]`);
    if (activeLink) {
      activeLink.classList.add('is-active');
      activeLink.setAttribute('aria-current', 'page');
      activeLink.classList.remove('border-transparent', 'hover:border-gray-300', 'dark:hover:border-gray-600');
      activeLink.classList.add('border-primary');
      
      // Scroll the active item into view on mobile
      if (window.innerWidth < 1024) {
        activeLink.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
      }
    }
    
    // Update page title and breadcrumb
    this.updatePageTitle(routeKey);
    this.updateBreadcrumb(routeKey);
  }
  
  updatePageTitle(routeKey) {
    const pageTitle = document.getElementById('page-title');
    if (pageTitle) {
      const titleMap = {
        'dashboard': 'Dashboard',
        'intake': 'Material Intake',
        'cutting': 'Cutting & Bundling',
        'sewing': 'Sewing Operations',
        'ironing': 'Ironing & Finishing',
        'packaging': 'Labeling & Packaging',
        'lots': 'Lots & Tracking',
        'workers': 'Worker Management',
        'admin': 'Administration',
        'audit': 'Audit Log',
        'settings': 'Settings'
      };
      
      pageTitle.textContent = titleMap[routeKey] || 'Kevera Manufacturing';
    }
  }
  
  updateBreadcrumb(routeKey) {
    const breadcrumbCurrent = document.getElementById('breadcrumb-current');
    if (breadcrumbCurrent) {
      const routeNames = {
        'dashboard': 'Overview',
        'intake': 'Intake Process',
        'cutting': 'Cutting & Bundling',
        'sewing': 'Sewing Process',
        'ironing': 'Ironing Process',
        'packaging': 'Packaging Process',
        'lots': 'Lot Management',
        'workers': 'Worker Management',
        'admin': 'Administration',
        'audit': 'Audit Trail',
        'settings': 'System Settings'
      };
      
      breadcrumbCurrent.textContent = routeNames[routeKey] || 'Unknown';
    }
  }

  // ============================
  // KEYBOARD SHORTCUTS
  // ============================
  
  setupKeyboardShortcuts() {
    document.addEventListener('keydown', (e) => {
      // Ctrl/Cmd + K for search
      if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
        e.preventDefault();
        const searchInput = document.getElementById('global-search');
        if (searchInput) {
          searchInput.focus();
        }
      }
      
      // Ctrl/Cmd + \ for mobile menu toggle
      if ((e.ctrlKey || e.metaKey) && e.key === '\\') {
        e.preventDefault();
        this.toggleMobileMenu();
      }
      
      // Ctrl/Cmd + Shift + T for theme toggle
      if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'T') {
        e.preventDefault();
        this.toggleTheme();
      }
    });
  }

  // ============================
  // NAVIGATION CLICK HANDLERS
  // ============================
  
  setupNavigationClicks() {
    // Delegate event handling for navigation links
    document.addEventListener('click', (e) => {
      const navLink = e.target.closest('.nav-link');
      if (navLink && this.mobileMenuOpen) {
        // Close mobile menu when navigation link is clicked
        setTimeout(() => {
          this.closeMobileMenu();
        }, 150);
      }
    });
  }

  // ============================
  // UTILITY FUNCTIONS
  // ============================
  
  trapFocus(element) {
    if (!element) return;
    
    const focusableElements = element.querySelectorAll(
      'a[href], button, textarea, input[type="text"], input[type="radio"], input[type="checkbox"], select'
    );
    
    const firstFocusableElement = focusableElements[0];
    const lastFocusableElement = focusableElements[focusableElements.length - 1];
    
    if (firstFocusableElement) {
      firstFocusableElement.focus();
    }
    
    element.addEventListener('keydown', (e) => {
      if (e.key === 'Tab') {
        if (e.shiftKey) {
          if (document.activeElement === firstFocusableElement) {
            lastFocusableElement.focus();
            e.preventDefault();
          }
        } else {
          if (document.activeElement === lastFocusableElement) {
            firstFocusableElement.focus();
            e.preventDefault();
          }
        }
      }
    });
  }
  
  showToast(message, type = 'info', duration = 5000) {
    const toastContainer = document.getElementById('notification-container') || document.body;
    
    const toast = document.createElement('div');
    toast.className = `kevera-toast kevera-toast--${type}`;
    toast.innerHTML = `
      <div class="flex items-center">
        <span class="material-symbols-outlined mr-3">
          ${type === 'success' ? 'check_circle' : type === 'error' ? 'error' : type === 'warning' ? 'warning' : 'info'}
        </span>
        <span>${message}</span>
      </div>
      <button class="ml-4 text-current opacity-70 hover:opacity-100" onclick="this.parentElement.remove()">
        <span class="material-symbols-outlined">close</span>
      </button>
    `;
    
    toastContainer.appendChild(toast);
    
    // Trigger animation
    setTimeout(() => {
      toast.classList.add('kevera-toast--active');
    }, 100);
    
    // Auto remove
    setTimeout(() => {
      toast.classList.remove('kevera-toast--active');
      setTimeout(() => {
        toast.remove();
      }, 300);
    }, duration);
  }
}

// Initialize the shared layout manager
const sharedLayoutManager = new SharedLayoutManager();

// Export for use in other scripts
window.SharedLayoutManager = sharedLayoutManager;